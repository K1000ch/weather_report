使用技術はHTML&CSS&JavaScriptです。
JSライブラリは以下のものを使用しました。
JQuery
Swiper.js
Moment.js

APIはOpenWeatherMapのものを使用しています。
ブラウザはGoogleChromeでのみ動作確認をしています。


課題にあった必須要件はすべて満たしているかと思います。
東京と神奈川の天気予報を取得したうえでDOMを生成し、それぞれのスライドは2秒静止したあと2秒かけて移動するのを繰り返します。
デザインやフォントなどは特に指定がなかったので、最低限の体裁だけ整えました。

表示される予報と実際の天気が食い違うことがありますが、APIから情報を取得する際のミスではないことは確認してあります。
今回はOpenWeatherMapを使いましたが、日本の都市の予報に関してはあまり正確ではないかもしれません。


・「可読性が高く、あるユースケースに対する追加仕様も可能なプログラムはさらに望ましいです。」
→
処理を関数で切り分け、また細かくコメントアウトを入れることで可読性を高めるよう配慮しました。
そこまで行数が多くないため、jsファイルの分割は不要だと判断しました。

追加仕様に関しては、
1、
スライド内のDOMを動的に生成するようにしてあります。
そのため、都市名とOpenWeatherにおける都市IDを配列「wr_city_list」に追加、削除するだけで、表示される都市を変更することができます(weather_report.jsの19~29行にコメントアウトを外すと江別市とキャンベラ市の天気予報が表示されるのが確認できます)。
またDOM構造などを変更したい場合も、DOMを生成している処理を書き換えることで対応が可能です。

2、
それぞれの処理を関数で切り分けることで仕様変更に対応しやすいよう配慮しています。
たとえば使用するライブラリやAPIを変更する場合、該当する関数内の処理を変更したうえで戻り値を適切に返せば問題なく動作するようになっています。

3、
アイコン名や、CSSを適用するためのクラス名もすべて動的に生成しているため、該当する変数の値を書き換えることで簡単にアイコンやデザインなどの変更できます。


・「任意のWebサイト上にてそのスクリプトを読み込んだ際、そのWebサイト上のいかなる挙動についても影響を与えないものが望ましいです。」
→
天気予報を表示させる一連の要素を、重複しづらいID名(weather_report_1347)を付与した要素でラッピングすることで対処しました。
CSSは必ずこのIDを経由したうえで指定しているため、同時に読み込まれる他のDOMへは影響は与えないと思われます。
スクリプトでDOMの特定の要素を指定する際も、必ずこのIDを経由する形でセレクタを指定するようにしてあります。
